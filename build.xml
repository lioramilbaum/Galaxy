<project name="Galaxy" default="up">
	
	<loadproperties srcFile="conf/Galaxy.properties"/>
	
	<target name="base">
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="/c vagrant destroy --force" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		<delete file="package.box"/>
		<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
				<arg line="/c vagrant up ubuntu --provider=virtualbox --no-parallel" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
				<arg line="/c vagrant package ubuntu" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
				<arg line="/c vagrant box add Opscode-ubuntu-12.04-Galaxy package.box --force" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		<delete file="package.box"/>
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="/c vagrant destroy --force" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>	

		<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
				<arg line="/c vagrant up centos --provider=virtualbox --no-parallel" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
				<arg line="/c vagrant package centos" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
				<arg line="/c vagrant box add CentOS-6.6-x86_64-v20150426-Galaxy package.box --force" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		<delete file="package.box"/>
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="/c vagrant destroy --force" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>				
	</target>
	
	<target name="init">

		<fixcrlf srcdir="${GALAXY_HOME}/conf" includes="**/*.properties,**/*.yaml"
			eol="crlf"/>

		<copy file="${GALAXY_HOME}/conf/Galaxy.yaml" tofile="${GALAXY_HOME}/conf/nodes.properties" />
		<replaceregexp file="${GALAXY_HOME}/conf/nodes.properties" match=":" replace="=" flags="g" byline="true" />

		<concat destfile="${GALAXY_HOME}/conf/Galaxy.cfg">
			<filelist dir="${GALAXY_HOME}/conf"
				files="Galaxy.properties,Galaxy.yaml" />
		</concat>
		<replaceregexp file="${GALAXY_HOME}/conf/Galaxy.cfg" match=":\s+" replace="=" flags="g" byline="true" />
		<replaceregexp file="${GALAXY_HOME}/conf/Galaxy.cfg" match="\{|\}" replace="" flags="g" byline="true" />
		<replaceregexp file="${GALAXY_HOME}/conf/Galaxy.cfg" match="\s+=\s+" replace="=" flags="g" byline="true" />
		<fixcrlf srcdir="${GALAXY_HOME}/conf" includes="**/*.cfg"
			eol="lf"/>
		
		<loadproperties srcfile="${GALAXY_HOME}/conf/nodes.properties" />
		
	</target>
	
	<target name="destroy" depends="">
		
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="/c vagrant destroy --force" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		
	</target>
	
	<target name="up" depends="destroy">
					
		<if>
			<equals arg1="${PROVISION_GIT}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up git --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_SYNC}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up sync --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_STASH}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up stash --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_GITHUB}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up github --provider=aws --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_DB}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up db --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_CLM}" arg2="true" />
			<then>				
				<property environment="env"/>
				<property name="ATLAS_TOKE" value="${env.ATLAS_TOKE}"/>
				
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true">
					<arg line="/c vagrant login --token ${ATLAS_TOKEN}" />
				</exec>
				<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true">			
					<arg line="/c vagrant box update --box liora/clm" />
				</exec>	
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up clm --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true">
					<arg line="/c vagrant login --logout --token ${ATLAS_TOKEN}" />
				</exec>
			</then>	
		</if>

		<if>
			<equals arg1="${PROVISION_RRDI}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up rrdi --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_CI}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up ci --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_UCD_SERVER}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up ucd_server --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_UCD_AGENT1}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up ucd_agent1 --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_UCD_AGENT2}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up ucd_agent2 --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_UCR}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up ucr --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_JIRA}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up jira --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_RLIA}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up rlia --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_ANSIBLE}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up ansible --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_CHEF}" arg2="true" />
			<then>
				<exec executable="cmd"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="/c vagrant up chef_workstation --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>		
	</target>
	
	<target name="vagrant-push">
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true">
			<env key="ATLAS_TOKEN" value="DCn3cXyWFXN6zwAUcX5iRsyyeqQPn7mARsxxsV8ys5tdexprXyZgUaY6JNRG5mQFu94"/>
			<arg line="/c vagrant push" />
		</exec>
	</target>
	
	<target name="packer-push clm">
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true">
			<env key="ATLAS_TOKEN" value="DCn3cXyWFXN6zwAUcX5iRsyyeqQPn7mARsxxsV8ys5tdexprXyZgUaY6JNRG5mQFu94"/>
			<arg line='/c packer push -name liora/clm -var "galaxy_dir=/packer" clm.json' />
		</exec>
	</target>
	
	<target name="packer clm">
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true">
			<env key="ATLAS_TOKEN" value="DCn3cXyWFXN6zwAUcX5iRsyyeqQPn7mARsxxsV8ys5tdexprXyZgUaY6JNRG5mQFu94"/>
			<arg line='/c packer build -debug -var "galaxy_dir=." clm.json' />
		</exec>
	</target>
	
	<target name="packer-push sync">
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true">
			<env key="ATLAS_TOKEN" value="DCn3cXyWFXN6zwAUcX5iRsyyeqQPn7mARsxxsV8ys5tdexprXyZgUaY6JNRG5mQFu94"/>
			<arg line='/c packer push -name liora/sync -var "galaxy_dir=/packer" sync.json' />
		</exec>
	</target>
	
	<target name="packer sync">
		<exec executable="cmd" dir="${GALAXY_HOME}" failonerror="true">
			<env key="ATLAS_TOKEN" value="DCn3cXyWFXN6zwAUcX5iRsyyeqQPn7mARsxxsV8ys5tdexprXyZgUaY6JNRG5mQFu94"/>
			<arg line='/c packer build -var "galaxy_dir=." sync.json' />
		</exec>
	</target>
	
	<target name="knife server create">
		
		<exec executable="C:\opscode\chefdk\bin\knife.bat"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="cookbook upload -a --force" />
		</exec>	
		
		<if>
			<equals arg1="${PROVISION_CLM}" arg2="true" />
			<then>				
				<exec executable="C:\opscode\chefdk\bin\knife.bat"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="ec2 server create --node-name clm --security-group-ids sg-66dc4703 --subnet subnet-9fb295fa" />
				</exec>
				<!--
				<exec executable="C:\opscode\chefdk\bin\knife.bat"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="ec2 server create -node-name clm -security-group-ids sg-66dc4703 -subnet subnet-7cf03b25" />
				</exec>
				-->
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
	</target>
	
	<target name="knife cleanup">
		
		<exec executable="C:\opscode\chefdk\bin\knife.bat"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="ec2 server list" />
		</exec>		
		<exec executable="C:\opscode\chefdk\bin\knife.bat"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="client delete clm -y" />
		</exec>
		<exec executable="C:\opscode\chefdk\bin\knife.bat"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="node delete clm -y" />
		</exec>
		
	</target>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="ant-contrib-0.6-bin/lib/ant-contrib-0.6.jar"/>
	  </classpath>
	</taskdef>
	
</project>