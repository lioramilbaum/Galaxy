<project name="Galaxy" default="up">
	
	<loadproperties srcFile="conf/Galaxy.properties"/>
	<property environment="env"/>
	
	<target name="destroy" depends="">
		
		<exec executable="/usr/local/bin/vagrant" dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="destroy --force" />
		</exec>
		<fail>
			<condition>
				<isfailure code="${return.code}"/>
			</condition>
		</fail>
		
	</target>
	
	<target name="up" depends="destroy">

		<antcall target="vagrant-node">
			<param name="node.provision" value="${PROVISION_CLM}"/>
			<param name="node.name" value="clm_server"/>
		</antcall>

		<antcall target="vagrant-node">
			<param name="node.provision" value="${PROVISION_CLM_BUILDENGINE}"/>
			<param name="node.name" value="clm_buildengine"/>
		</antcall>
		
		<exec executable="say">
			<arg value="done"/>
		</exec>
		
		<if>
			<equals arg1="${PROVISION_CLM}" arg2="true" />
			<then>
				<if>
					<equals arg1="${PACKER}" arg2="true" />
					<then>
						<property name="ATLAS_TOKEN" value="${env.ATLAS_TOKEN}"/>
						<exec executable="/usr/local/bin/vagrant"  dir="${GALAXY_HOME}" failonerror="true">
							<arg line="login --token ${ATLAS_TOKEN}" />
						</exec>
						<exec executable="/usr/local/bin/vagrant" dir="${GALAXY_HOME}" failonerror="true">			
							<arg line="box update --box liora/clm" />
						</exec>	
						<exec executable="/usr/local/bin/vagrant"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
							<arg line="up clm_server --provider=${VAGRANT_PROVIDER} --no-parallel" />
						</exec>
						<fail>
							<condition>
								<isfailure code="${return.code}"/>
							</condition>
						</fail>
						<exec executable="/usr/local/bin/vagrant"  dir="${GALAXY_HOME}" failonerror="true">
							<arg line="login --logout --token ${ATLAS_TOKEN}" />
						</exec>
					</then>
					<else>
						<exec executable="/usr/local/bin/vagrant"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
							<arg line="up clm_server --provider=${VAGRANT_PROVIDER} --no-parallel" />
						</exec>
						<fail>
							<condition>
								<isfailure code="${return.code}"/>
							</condition>
						</fail>
					</else>
				</if>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_UCD_SERVER}" arg2="true" />
			<then>
				<exec executable="/usr/local/bin/vagrant"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="up ucd_server --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<if>
			<equals arg1="${PROVISION_UCD_AGENT}" arg2="true" />
			<then>
				<exec executable="/usr/local/bin/vagrant"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="up ucd_agent --provider=${VAGRANT_PROVIDER} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
	</target>
	
	<!-- ================================= 
          target: vagrant-node              
         ================================= -->
    <target name="vagrant-node" description="provisioning vagrant node function">
		<if>
			<equals arg1="${node.provision}" arg2="true" />
			<then>
				<exec executable="/usr/local/bin/vagrant"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="up ${node.name} --no-parallel" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
    </target>
	
	<target name="packer-push clm">
		<exec executable="/usr/local/bin/packer" dir="${GALAXY_HOME}" failonerror="true">
			<env key="ATLAS_TOKEN" value="DCn3cXyWFXN6zwAUcX5iRsyyeqQPn7mARsxxsV8ys5tdexprXyZgUaY6JNRG5mQFu94"/>
			<arg line='push -name liora/clm -var "galaxy_home=/packer" clm.json' />
		</exec>
	</target>
	
	<target name="packer clm">
		
		<exec executable="/usr/local/bin/knife"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="upload . --force" />
		</exec>
		
		<exec executable="/usr/local/bin/packer" dir="${GALAXY_HOME}" failonerror="true">
			<arg line='build -var "galaxy_home=${GALAXY_HOME}" -only=docker clm.json' />
		</exec>
	</target>
	
	<target name="knife server create" depends="knife cleanup">
		
		<exec executable="/usr/local/bin/knife"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
			<arg line="upload . --force" />
		</exec>
		
		<if>
			<equals arg1="${PROVISION_CLM}" arg2="true" />
			<then>				
				<exec executable="/usr/local/bin/knife"
					dir="${GALAXY_HOME}"
					failonerror="true"
					resultproperty="return.code">
						<arg line="ec2 server create -r 'role[clm-server]' -i '~/.ssh/id_rsa.pem' -I ami-2a207e5d -f m3.xlarge --node-name galaxy_clm_server --security-group-ids sg-66dc4703 --subnet subnet-9fb295fa --ebs-size '100'" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_UCD_SERVER}" arg2="true" />
			<then>				
				<exec executable="/usr/local/bin/knife"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="ec2 server create -r 'role[ucd-server]' -i '~/.ssh/id_rsa.pem' -I ami-60a10117 -f t2.small --node-name galaxy_ucd_server --security-group-ids sg-66dc4703 --subnet subnet-9fb295fa --ebs-size '100'" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		
		<if>
			<equals arg1="${PROVISION_UCD_DESIGNER}" arg2="true" />
			<then>				
				<exec executable="/usr/local/bin/knife"  dir="${GALAXY_HOME}" failonerror="true" resultproperty="return.code">
					<arg line="ec2 server create -r 'role[ucd-designer]' -i '~/.ssh/id_rsa.pem' -I ami-60a10117 -f t2.small --node-name galaxy_ucd_designer --security-group-ids sg-91979ef5 --subnet subnet-9fb295fa --ebs-size '100'" />
				</exec>
				<fail>
					<condition>
						<isfailure code="${return.code}"/>
					</condition>
				</fail>
			</then>	
		</if>
		<exec executable="say">
			<arg line="done"/>
		</exec>
	</target>
	
	<target name="knife cleanup">

		<var name="ec2.server" value="none" />
		
		<exec executable="/usr/local/bin/knife"
			dir="${GALAXY_HOME}"
			failonerror="false"
			resultproperty="return.code"
			outputproperty="outputproperty">
				<arg line="ec2 server list" />
		</exec>
		
		<for list="${outputproperty}" delimiter="${line.separator}" param = "line">
			<sequential>
				<propertyregex property="ec2.server"
					override="true"
					input="@{line}"
					regexp="^i-[0-9a-z]+"
					select="\0"/>
				<if>
					<equals arg1="${ec2.server}" arg2="none" />
				<then>
				</then>
				<else>
					<exec executable="/usr/local/bin/knife"  
						dir="${GALAXY_HOME}"
						failonerror="false" 
						resultproperty="return.code"
						inputstring="Y">
							<arg line="ec2 server delete ${ec2.server}" />
					</exec>
				</else>
				</if>
			</sequential>
		</for>
		<exec executable="/usr/local/bin/knife"  dir="${GALAXY_HOME}" failonerror="false" resultproperty="return.code">
			<arg line="client bulk delete 'galaxy*' -y" />
		</exec>
		<exec executable="/usr/local/bin/knife"  dir="${GALAXY_HOME}" failonerror="false" resultproperty="return.code">
			<arg line="node bulk delete 'galaxy*' -y" />
		</exec>
	</target>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="ant-contrib-0.6-bin/lib/ant-contrib-0.6.jar"/>
	  </classpath>
	</taskdef>
	
</project>